// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: graphserver.proto
#ifndef GRPC_graphserver_2eproto__INCLUDED
#define GRPC_graphserver_2eproto__INCLUDED

#include "graphserver.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace graphserver {

class Greeter final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::graphserver::HelloRequest& request, ::graphserver::HelloReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::graphserver::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::graphserver::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::graphserver::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    virtual ::grpc::Status add_node(::grpc::ClientContext* context, const ::graphserver::Request& request, ::graphserver::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::graphserver::Reply>> Asyncadd_node(::grpc::ClientContext* context, const ::graphserver::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::graphserver::Reply>>(Asyncadd_nodeRaw(context, request, cq));
    }
    virtual ::grpc::Status add_edge(::grpc::ClientContext* context, const ::graphserver::Request& request, ::graphserver::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::graphserver::Reply>> Asyncadd_edge(::grpc::ClientContext* context, const ::graphserver::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::graphserver::Reply>>(Asyncadd_edgeRaw(context, request, cq));
    }
    virtual ::grpc::Status remove_node(::grpc::ClientContext* context, const ::graphserver::Request& request, ::graphserver::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::graphserver::Reply>> Asyncremove_node(::grpc::ClientContext* context, const ::graphserver::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::graphserver::Reply>>(Asyncremove_nodeRaw(context, request, cq));
    }
    virtual ::grpc::Status remove_edge(::grpc::ClientContext* context, const ::graphserver::Request& request, ::graphserver::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::graphserver::Reply>> Asyncremove_edge(::grpc::ClientContext* context, const ::graphserver::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::graphserver::Reply>>(Asyncremove_edgeRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::graphserver::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::graphserver::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::graphserver::Reply>* Asyncadd_nodeRaw(::grpc::ClientContext* context, const ::graphserver::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::graphserver::Reply>* Asyncadd_edgeRaw(::grpc::ClientContext* context, const ::graphserver::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::graphserver::Reply>* Asyncremove_nodeRaw(::grpc::ClientContext* context, const ::graphserver::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::graphserver::Reply>* Asyncremove_edgeRaw(::grpc::ClientContext* context, const ::graphserver::Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::graphserver::HelloRequest& request, ::graphserver::HelloReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::graphserver::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::graphserver::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::graphserver::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    ::grpc::Status add_node(::grpc::ClientContext* context, const ::graphserver::Request& request, ::graphserver::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::graphserver::Reply>> Asyncadd_node(::grpc::ClientContext* context, const ::graphserver::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::graphserver::Reply>>(Asyncadd_nodeRaw(context, request, cq));
    }
    ::grpc::Status add_edge(::grpc::ClientContext* context, const ::graphserver::Request& request, ::graphserver::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::graphserver::Reply>> Asyncadd_edge(::grpc::ClientContext* context, const ::graphserver::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::graphserver::Reply>>(Asyncadd_edgeRaw(context, request, cq));
    }
    ::grpc::Status remove_node(::grpc::ClientContext* context, const ::graphserver::Request& request, ::graphserver::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::graphserver::Reply>> Asyncremove_node(::grpc::ClientContext* context, const ::graphserver::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::graphserver::Reply>>(Asyncremove_nodeRaw(context, request, cq));
    }
    ::grpc::Status remove_edge(::grpc::ClientContext* context, const ::graphserver::Request& request, ::graphserver::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::graphserver::Reply>> Asyncremove_edge(::grpc::ClientContext* context, const ::graphserver::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::graphserver::Reply>>(Asyncremove_edgeRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::graphserver::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::graphserver::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::graphserver::Reply>* Asyncadd_nodeRaw(::grpc::ClientContext* context, const ::graphserver::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::graphserver::Reply>* Asyncadd_edgeRaw(::grpc::ClientContext* context, const ::graphserver::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::graphserver::Reply>* Asyncremove_nodeRaw(::grpc::ClientContext* context, const ::graphserver::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::graphserver::Reply>* Asyncremove_edgeRaw(::grpc::ClientContext* context, const ::graphserver::Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_SayHello_;
    const ::grpc::RpcMethod rpcmethod_add_node_;
    const ::grpc::RpcMethod rpcmethod_add_edge_;
    const ::grpc::RpcMethod rpcmethod_remove_node_;
    const ::grpc::RpcMethod rpcmethod_remove_edge_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::graphserver::HelloRequest* request, ::graphserver::HelloReply* response);
    virtual ::grpc::Status add_node(::grpc::ServerContext* context, const ::graphserver::Request* request, ::graphserver::Reply* response);
    virtual ::grpc::Status add_edge(::grpc::ServerContext* context, const ::graphserver::Request* request, ::graphserver::Reply* response);
    virtual ::grpc::Status remove_node(::grpc::ServerContext* context, const ::graphserver::Request* request, ::graphserver::Reply* response);
    virtual ::grpc::Status remove_edge(::grpc::ServerContext* context, const ::graphserver::Request* request, ::graphserver::Reply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SayHello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::graphserver::HelloRequest* request, ::graphserver::HelloReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::graphserver::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::graphserver::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_add_node : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_add_node() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_add_node() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_node(::grpc::ServerContext* context, const ::graphserver::Request* request, ::graphserver::Reply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_node(::grpc::ServerContext* context, ::graphserver::Request* request, ::grpc::ServerAsyncResponseWriter< ::graphserver::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_add_edge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_add_edge() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_add_edge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_edge(::grpc::ServerContext* context, const ::graphserver::Request* request, ::graphserver::Reply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_edge(::grpc::ServerContext* context, ::graphserver::Request* request, ::grpc::ServerAsyncResponseWriter< ::graphserver::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_remove_node : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_remove_node() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_remove_node() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remove_node(::grpc::ServerContext* context, const ::graphserver::Request* request, ::graphserver::Reply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestremove_node(::grpc::ServerContext* context, ::graphserver::Request* request, ::grpc::ServerAsyncResponseWriter< ::graphserver::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_remove_edge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_remove_edge() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_remove_edge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remove_edge(::grpc::ServerContext* context, const ::graphserver::Request* request, ::graphserver::Reply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestremove_edge(::grpc::ServerContext* context, ::graphserver::Request* request, ::grpc::ServerAsyncResponseWriter< ::graphserver::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SayHello<WithAsyncMethod_add_node<WithAsyncMethod_add_edge<WithAsyncMethod_remove_node<WithAsyncMethod_remove_edge<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SayHello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::graphserver::HelloRequest* request, ::graphserver::HelloReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_add_node : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_add_node() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_add_node() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_node(::grpc::ServerContext* context, const ::graphserver::Request* request, ::graphserver::Reply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_add_edge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_add_edge() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_add_edge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_edge(::grpc::ServerContext* context, const ::graphserver::Request* request, ::graphserver::Reply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_remove_node : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_remove_node() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_remove_node() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remove_node(::grpc::ServerContext* context, const ::graphserver::Request* request, ::graphserver::Reply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_remove_edge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_remove_edge() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_remove_edge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remove_edge(::grpc::ServerContext* context, const ::graphserver::Request* request, ::graphserver::Reply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SayHello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::graphserver::HelloRequest, ::graphserver::HelloReply>(std::bind(&WithStreamedUnaryMethod_SayHello<BaseClass>::StreamedSayHello, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::graphserver::HelloRequest* request, ::graphserver::HelloReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::graphserver::HelloRequest,::graphserver::HelloReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_add_node : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_add_node() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::graphserver::Request, ::graphserver::Reply>(std::bind(&WithStreamedUnaryMethod_add_node<BaseClass>::Streamedadd_node, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_add_node() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status add_node(::grpc::ServerContext* context, const ::graphserver::Request* request, ::graphserver::Reply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedadd_node(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::graphserver::Request,::graphserver::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_add_edge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_add_edge() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::graphserver::Request, ::graphserver::Reply>(std::bind(&WithStreamedUnaryMethod_add_edge<BaseClass>::Streamedadd_edge, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_add_edge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status add_edge(::grpc::ServerContext* context, const ::graphserver::Request* request, ::graphserver::Reply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedadd_edge(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::graphserver::Request,::graphserver::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_remove_node : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_remove_node() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::graphserver::Request, ::graphserver::Reply>(std::bind(&WithStreamedUnaryMethod_remove_node<BaseClass>::Streamedremove_node, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_remove_node() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status remove_node(::grpc::ServerContext* context, const ::graphserver::Request* request, ::graphserver::Reply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedremove_node(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::graphserver::Request,::graphserver::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_remove_edge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_remove_edge() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::graphserver::Request, ::graphserver::Reply>(std::bind(&WithStreamedUnaryMethod_remove_edge<BaseClass>::Streamedremove_edge, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_remove_edge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status remove_edge(::grpc::ServerContext* context, const ::graphserver::Request* request, ::graphserver::Reply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedremove_edge(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::graphserver::Request,::graphserver::Reply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_add_node<WithStreamedUnaryMethod_add_edge<WithStreamedUnaryMethod_remove_node<WithStreamedUnaryMethod_remove_edge<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_add_node<WithStreamedUnaryMethod_add_edge<WithStreamedUnaryMethod_remove_node<WithStreamedUnaryMethod_remove_edge<Service > > > > > StreamedService;
};

}  // namespace graphserver


#endif  // GRPC_graphserver_2eproto__INCLUDED
